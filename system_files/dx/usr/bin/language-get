#!/usr/bin/env python3
import sys
import os
import json
import shutil
import subprocess
import shlex

# Locations to search for config files
CONFIG_DIRS = [
    "/usr/share/language-get",
]

EDITOR_CONFIG_PATHS = {
    "vscode_config_git": os.path.expanduser("~/.vscode"),
    "zed_config_git": os.path.expanduser("~/.config/zed"),
    "vscodium_config_git": os.path.expanduser("~/.vscodium"),
    "nvim_config_git": os.path.expanduser("~/.config/nvim"),
}

DEVCONTAINER_BASE_DIR = os.path.expanduser("~/.devcontainers")


def find_config_file(language_name):
    """Searches for the JSON file in the defined directories."""
    for config_dir in CONFIG_DIRS:
        config_path = os.path.join(config_dir, f"{language_name}.json")
        if os.path.exists(config_path):
            return config_path
    return None


def run_command(command):
    """Runs a shell command, exits on failure."""
    try:
        subprocess.run(command, check=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        sys.exit(f"Failed to run: {' '.join(command)}")


def main():
    if len(sys.argv) != 2:
        print("Usage: python language-get.py <language_name>")
        sys.exit(1)

    language_name = sys.argv[1]
    config_file_path = find_config_file(language_name)

    if not config_file_path:
        print("Language config file not found")
        sys.exit(1)

    try:
        with open(config_file_path, "r") as f:
            config = json.load(f)
    except (json.JSONDecodeError, IOError):
        # Corrupt or unreadable config
        print("Corrupt or unreadable config")
        sys.exit(1)

    # Install brew packages
    print("Installing brew packages...")
    print("-----------------------------")
    print("")

    if "brew_packages" in config and isinstance(config["brew_packages"], list):
        command = ["brew", "install"] + config["brew_packages"]
        run_command(command)

    # Commands for installation
    if "lang_install_cmds" in config and isinstance(config.get("lang_install_cmds"), list):
        print("")
        print("Installing language with dependencies...")
        print("-----------------------------")
        print("")

        parsed_lang_commands = []
        for command_string in config["lang_install_cmds"]:
            parsed_command = shlex.split(command_string)
            parsed_lang_commands.append(parsed_command)

        for command_args in parsed_lang_commands:
            command_for_log = " ".join(command_args)
            print(f"Executing command: {command_for_log}")

            subprocess.run(command_args, check=True)

    # Setup editor config
    print("")
    print("Setting up editor...")
    print("-----------------------------")
    print("")
    for key, clone_path in EDITOR_CONFIG_PATHS.items():
        if key in config and isinstance(config[key], str):
            # Ensure parent directory exists
            os.makedirs(os.path.dirname(clone_path), exist_ok=True)

            # Cleanup
            try:
                shutil.rmtree(clone_path)
            except OSError:
                pass

            command = ["git", "clone", config[key], clone_path]
            run_command(command)

    # Handle devcontainer
    if "devcontainer" in config and isinstance(config.get("devcontainer"), dict):
        print("")
        print("Setting up devcontainers...")
        print("-----------------------------")
        print("")

        git_repo = config["devcontainer"].get("git_repo")
        if git_repo:
            # Ensure base devcontainer directory exists
            os.makedirs(DEVCONTAINER_BASE_DIR, exist_ok=True)
            clone_path = os.path.join(
                DEVCONTAINER_BASE_DIR, f"{language_name}-devcontainer"
            )

            # Cleanup
            try:
                shutil.rmtree(clone_path)
            except OSError:
                pass

            command = ["git", "clone", git_repo, clone_path]
            run_command(command)

    # Post-install command
    if "commands" in config and isinstance(config.get("commands"), list):
        print("")
        print("Running post-install commands...")
        print("-----------------------------")
        print("")

        parsed_commands = []
        for command_string in config["commands"]:
            parsed_command = shlex.split(command_string)
            parsed_commands.append(parsed_command)

        for command_args in parsed_commands:
            command_for_log = " ".join(command_args)
            print(f"Executing command: {command_for_log}")

            subprocess.run(command_args, check=True)

    print("")
    print("Environment for " + language_name + " is setup successfully.")

if __name__ == "__main__":
    main()
